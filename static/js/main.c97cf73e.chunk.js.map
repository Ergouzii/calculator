{"version":3,"sources":["components/App.js","components/Result.jsx","components/KeyPad.jsx","serviceWorker.js","index.js"],"names":["initResult","App","props","_this","Object","_Users_liuxiaohui_Desktop_calculator_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","_Users_liuxiaohui_Desktop_calculator_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_Users_liuxiaohui_Desktop_calculator_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","updateResult","newResult","setState","result","calculate","eval","state","e","handleError","reset","setTimeout","onClick","button","length","slice","bind","_Users_liuxiaohui_Desktop_calculator_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_4__","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","className","_Result__WEBPACK_IMPORTED_MODULE_8__","_KeyPad__WEBPACK_IMPORTED_MODULE_9__","React","Component","Result","react__WEBPACK_IMPORTED_MODULE_5___default","KeyPad","name","target","Boolean","window","location","hostname","match","ReactDOM","render","react_default","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c97cf73e.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport Result from './Result';\nimport KeyPad from './KeyPad';\n\nconst initResult = '0';\n\nclass App extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            result: initResult // the result is initially 0\n        };\n\n        this.onClick = this.onClick.bind(this)\n    }\n\n    updateResult = newResult => {\n        this.setState({\n            result: newResult\n        })\n    };\n\n    calculate = () => {\n        try {\n            // eslint-disable-next-line no-eval\n            let newResult = eval(this.state.result);\n            this.updateResult(newResult)\n        } catch (e) {\n            this.handleError()\n        }\n\n    };\n\n    reset = () => {\n        this.updateResult(initResult)\n    };\n\n    // if invalid input, prompt error message and reset automatically after 1 second\n    handleError = () => {\n        this.updateResult('Invalid input!');\n        setTimeout(() => {\n            this.reset()\n        }, 1000)\n    };\n\n    onClick = button => {\n        if (this.state.result === initResult  && button !== 'CE'  && button !== 'AC') {\n            this.reset();\n            this.updateResult(button)\n        } else {\n            if (button === '=') {\n                if (this.state.result === '') {\n                    this.handleError()\n                } else {\n                    this.calculate()\n                }\n            } else if (button === 'AC') {\n                this.reset()\n            } else if (button === 'CE') {\n                if (this.state.result.length === 1) {\n                    this.reset()\n                } else {\n                    let newResult = this.state.result.slice(0, -1);\n                    this.updateResult(newResult)\n                }\n            } else {\n                let newResult = this.state.result + button;\n                this.updateResult(newResult)\n            }\n        }\n    };\n\n    render() {\n        return (\n            <div className=\"App\">\n                <div className=\"wrapper\">\n                    <Result result={this.state.result}/>\n                    <KeyPad onClick={this.onClick}/>\n                </div>\n            </div>\n        );\n    }\n\n}\n\nexport default App;\n","import React, {Component} from 'react';\nimport './Result.css';\n\nclass Result extends Component {\n    render() {\n        return (\n            <div className=\"row result\">\n                <p>{this.props.result}</p>\n            </div>\n        );\n    }\n}\n\nexport default Result;\n","import React, {Component} from 'react';\nimport './KeyPad.css';\n\nclass KeyPad extends Component {\n    render() {\n        return (\n            <div className=\"keypad\">\n                <div className={'row'}>\n                    <button className={'button'} name={'1'} onClick={e => this.props.onClick(e.target.name)}> 1\n                    </button>\n                    <button className={'button'} name={'2'} onClick={e => this.props.onClick(e.target.name)}> 2\n                    </button>\n                    <button className={'button'} name={'3'} onClick={e => this.props.onClick(e.target.name)}> 3\n                    </button>\n                    <button className={'button'} name={'+'}\n                            onClick={e => this.props.onClick(e.target.name)}> +\n                    </button>\n                </div>\n                <div className={'row'}>\n                    <button className={'button'} name={'4'} onClick={e => this.props.onClick(e.target.name)}> 4\n                    </button>\n                    <button className={'button'} name={'5'} onClick={e => this.props.onClick(e.target.name)}> 5\n                    </button>\n                    <button className={'button'} name={'6'} onClick={e => this.props.onClick(e.target.name)}> 6\n                    </button>\n                    <button className={'button'} name={'-'}\n                            onClick={e => this.props.onClick(e.target.name)}> -\n                    </button>\n                </div>\n                <div className={'row'}>\n                    <button className={'button'} name={'7'} onClick={e => this.props.onClick(e.target.name)}> 7\n                    </button>\n                    <button className={'button'} name={'8'} onClick={e => this.props.onClick(e.target.name)}> 8\n                    </button>\n                    <button className={'button'} name={'9'} onClick={e => this.props.onClick(e.target.name)}> 9\n                    </button>\n                    <button className={'button'} name={'*'}\n                            onClick={e => this.props.onClick(e.target.name)}> x\n                    </button>\n                </div>\n                <div className={'row'}>\n                    <button className={'button'} name={'0'} onClick={e => this.props.onClick(e.target.name)}> 0\n                    </button>\n                    <button className={'button'} name={'.'} onClick={e => this.props.onClick(e.target.name)}> .\n                    </button>\n                    <button className={'button'} name={'/'}\n                            onClick={e => this.props.onClick(e.target.name)}> /\n                    </button>\n                </div>\n                <div className={'row'}>\n                    <button className={'button'} name={'CE'}\n                            onClick={e => this.props.onClick(e.target.name)}> CE\n                    </button>\n                    <button className={'button'} name={'AC'}\n                            onClick={e => this.props.onClick(e.target.name)}> AC\n                    </button>\n                    <button className={'button'} name={'('}\n                            onClick={e => this.props.onClick(e.target.name)}> (\n                    </button>\n                    <button className={'button'} name={')'}\n                            onClick={e => this.props.onClick(e.target.name)}> )\n                    </button>\n                </div>\n                <div className={'row'}>\n                    <button className={'button equal'} name={'='}\n                            onClick={e => this.props.onClick(e.target.name)}> =\n                    </button>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default KeyPad;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}